import requests
from openai import OpenAI
import os
import json

api_key = "sk-proj-whd6Cycwl6et7vUnClQzT3BlbkFJwMblZsQZgRGQADM1LlGt"

client = OpenAI(
    # This is the default and can be omitted
    api_key=api_key,
)

def generate_Level(number, level, audience_language, lenguage):
    generation_prompt = f'''
    –¢—ã ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—á–µ–±–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É —É—Ä–æ–≤–Ω—è "{number}" –¥–ª—è –Ω–æ—Å–∏—Ç–µ–ª–µ–π —è–∑—ã–∫–∞: {audience_language}.
    –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {level}.

    üìå –í–ê–ñ–ù–û:
    - –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å == "Beginner", –í–°–ï –í–û–ü–†–û–°–´ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —è–∑—ã–∫–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ ({audience_language}). –û—Ç–≤–µ—Ç—ã ‚Äî –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.
    - –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å == "Intermediate" –∏–ª–∏ "Advanced", –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã ‚Äî –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.

    üéØ –¢–≤–æ—è –∑–∞–¥–∞—á–∞: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å **–≤–∞–ª–∏–¥–Ω—ã–π JSON** —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ backend:

    –ì–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç:
    {{
      "id": -1,
      "number": "{number}",
      "language": "{lenguage}",
      "exesizes": [ –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–¥–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3-4
        {{
          "id": -1,
          "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ (–Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)",
          "type": "composite",
          "level": 1,
          "exesize": [
            ... (5 –∑–∞–¥–∞–Ω–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤)
          ]
        }},
        ...
      ]
    }}

    –ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –º–∞—Å—Å–∏–≤–∞ `exesize` –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∏–ø–æ–≤:

    ---

    1. **test_question**
    ```json
    {{
      "id": -1,
      "type": "test_question",
      "question": {{
        "id": -1,
        "question": "–≤–æ–ø—Ä–æ—Å (–Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —É—Ä–æ–≤–Ω–µ Beginner, –∏–Ω–∞—á–µ ‚Äî –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)",
        "test_answers": ["–≤–∞—Ä–∏–∞–Ω—Ç 1", "–≤–∞—Ä–∏–∞–Ω—Ç 2", "–≤–∞—Ä–∏–∞–Ω—Ç 3", "–≤–∞—Ä–∏–∞–Ω—Ç 4"],
        "right_var": 1
      }}
    }}

        input_question

    {{
      "id": -1,
      "type": "input_question",
      "inputquestion": {{
        "id": -1,
        "type": "add_missing" | "check_grammar" | "check_answer",
        "question": "–≤–æ–ø—Ä–æ—Å (—Å–º. –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —É—Ä–æ–≤–Ω—é –≤—ã—à–µ)",
        "answer": "–æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
        "isrecord": true
      }}
    }}

        audio_question

    {{
      "id": -1,
      "type": "audio_question",
      "audio": {{
        "id": -1,
        "question": "–∑–∞–¥–∞–Ω–∏–µ (—Å–º. –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —É—Ä–æ–≤–Ω—é –≤—ã—à–µ)",
        "audio_query": "—Ñ—Ä–∞–∑–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
        "audio_url": "https://example.com/audio.mp3",
        "isrecord": false
      }}
    }}

        word_pair_exesize

    {{
      "id": -1,
      "type": "word_pair_exesize",
      "word_ex": {{
        "id": -1,
        "words": [
          {{
            "id": -1,
            "eng": "example",
            "rus": "–ø—Ä–∏–º–µ—Ä",
            "uzb": "misol"
          }},
          ...
        ]
      }}
    }}

    üîí –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:

        –í—Å–µ –ø–æ–ª—è id –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å -1.

        –ö–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç 5 –∑–∞–¥–∞–Ω–∏–π —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–∏–ø–æ–≤. —Å—Ç–æ—Ä–æ–≥–æ 5 –∑–∞–¥–∞–Ω–∏–π –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –º–µ–Ω—å—à–µ

        –í—Å–µ–≥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –ø–∞–∫–µ—Ç–∞. –Ω–µ–ª—å–∑—è —á—Ç–æ –±—ã –±—ã–ª–æ –º–µ–Ω—å—à–µ

        –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.

        –ü–µ—Ä–µ–≤–æ–¥—ã –≤ word_pair_exesize ‚Äî –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ —É–∑–±–µ–∫—Å–∫–∏–π.

        –ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ JSON ‚Äî –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON-–æ—Ç–≤–µ—Ç.
        '''

    try:
        gpt_response = client.chat.completions.create(
            model="gpt-4-turbo",
            response_format={"type": "json_object"},
            messages=[
                {"role": "system",
                 "content": "—Ç—ã –ø—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫—Ä–µ–∞—Ç–æ—Ä. –¢–´ —Å–æ—Å—Ç–∞–≤–ª—è–µ—à—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω—É–∂–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥ duolingvo. "},
                {"role": "user", "content": generation_prompt}
            ],
            temperature=0.7,
            max_tokens=4096
        )

        content = gpt_response.choices[0].message.content
        result_json = json.loads(content)
        return result_json

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω—è: {e}")
        return None

main_route = "https://khamraeva.pythonanywhere.com"

def fetch_max_level(base_url, language):
    url = f"{base_url}/free/levels"
    params = {"language": language}

    try:
        response = requests.get(url, params=params)
        response.raise_for_status()  # –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–¥ != 200

        data = response.json()
        return data.get("max_level")

    except requests.RequestException as e:
        print(f"Request failed: {e}")
        return None

def addLevel(level_data):
    url = f"{main_route}/free/add"
    response = requests.post(url, json=level_data)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if response.ok:
        print("‚úÖ –£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        print(response.text)

def main():
    counter = 0
    while True:
        max_level = fetch_max_level(main_route, "uz")
        print("Current max level:", max_level)

        data = generate_Level(int(max_level) + 1, "Beginer", "–£–∑–±–µ–∫—Å–∫–∏–π", "uz")
        print("Generated level:", int(max_level) + 1)

        addLevel(level_data=data)
        counter += 1

        if counter % 100 == 0:
            input("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ 100 —É—Ä–æ–≤–Ω–µ–π. –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)...")

if __name__ == '__main__':
    main()